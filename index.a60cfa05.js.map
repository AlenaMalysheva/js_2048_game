{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.boardSize = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                var board = [];\n                for(var i = 0; i < this.boardSize; i++)board.push(new Array(this.boardSize).fill(0));\n                return board;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var row = 0; row < this.boardSize; row++){\n                    var newRow = this.compressRow(this.board[row]);\n                    if (this.board[row].toString() !== newRow.toString()) {\n                        moved = true;\n                        this.board[row] = newRow;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    if (this.isGameOver()) this.status = \"lose\";\n                    else if (this.isWin()) this.status = \"win\";\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n                this.moveLeft();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.transpose();\n                this.moveLeft();\n                this.transpose();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.transpose();\n                this.moveRight();\n                this.transpose();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.score = 0;\n                    this.status = \"playing\";\n                    this.board = this.createEmptyBoard();\n                    this.addRandomTile();\n                    this.addRandomTile();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.start();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.boardSize; i++){\n                    for(var j = 0; j < this.boardSize; j++)if (this.board[i][j] === 0) emptyCells.push({\n                        x: i,\n                        y: j\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], x = _emptyCells_Math_floor.x, y = _emptyCells_Math_floor.y;\n                    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"compressRow\",\n            value: function compressRow(row) {\n                var newRow = row.filter(function(num) {\n                    return num !== 0;\n                });\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow[i + 1] = 0;\n                }\n                newRow = newRow.filter(function(num) {\n                    return num !== 0;\n                });\n                while(newRow.length < this.boardSize)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"transpose\",\n            value: function transpose() {\n                var transposed = this.createEmptyBoard();\n                for(var i = 0; i < this.boardSize; i++)for(var j = 0; j < this.boardSize; j++)transposed[i][j] = this.board[j][i];\n                this.board = transposed;\n            }\n        },\n        {\n            key: \"isWin\",\n            value: function isWin() {\n                return this.board.flat().includes(2048);\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                if (this.board.flat().includes(0)) return false;\n                for(var i = 0; i < this.boardSize; i++)for(var j = 0; j < this.boardSize - 1; j++){\n                    if (this.board[i][j] === this.board[i][j + 1] || this.board[j][i] === this.board[j + 1][i]) return false;\n                }\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$gameScoreElement = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$cells = Array.from(document.querySelectorAll(\".field-cell\"));\nfunction $197cd56b15c33885$var$updateUI() {\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$gameScoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$cells.forEach(function(cell, i) {\n        var row = Math.floor(i / 4);\n        var col = i % 4;\n        var value = state[row][col];\n        cell.textContent = value > 0 ? value : \"\";\n        cell.className = \"field-cell\";\n        if (value > 0) cell.classList.add(\"field-cell--\".concat(value));\n    });\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n    else if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$startGame() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n    $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n    $197cd56b15c33885$var$updateUI();\n}\nfunction $197cd56b15c33885$var$restartGame() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$updateUI();\n}\ndocument.addEventListener(\"keydown\", function(e) {\n    if ([\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ].includes(e.key)) {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n        }\n        $197cd56b15c33885$var$updateUI();\n    }\n});\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", $197cd56b15c33885$var$startGame);\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", $197cd56b15c33885$var$restartGame);\n\n})();\n//# sourceMappingURL=index.a60cfa05.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameScoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst cells = Array.from(document.querySelectorAll('.field-cell'));\n\nfunction updateUI() {\n  const state = game.getState();\n\n  gameScoreElement.textContent = game.getScore();\n\n  cells.forEach((cell, i) => {\n    const row = Math.floor(i / 4);\n    const col = i % 4;\n    const value = state[row][col];\n\n    cell.textContent = value > 0 ? value : '';\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction startGame() {\n  game.start();\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startButton.textContent = 'Restart';\n  startButton.classList.add('restart');\n  startButton.classList.remove('start');\n  updateUI();\n}\n\nfunction restartGame() {\n  game.restart();\n  updateUI();\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateUI();\n  }\n});\n\nstartButton.addEventListener('click', startGame);\n\nstartButton.addEventListener('click', restartGame);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.boardSize = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n    // eslint-disable-next-line no-console\n    // console.log(initialState);\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < this.boardSize; i++) {\n      board.push(new Array(this.boardSize).fill(0));\n    }\n\n    return board;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.boardSize; row++) {\n      const newRow = this.compressRow(this.board[row]);\n\n      if (this.board[row].toString() !== newRow.toString()) {\n        moved = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n\n      if (this.isGameOver()) {\n        this.status = 'lose';\n      } else if (this.isWin()) {\n        this.status = 'win';\n      }\n    }\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.score = 0;\n      this.status = 'playing';\n      this.board = this.createEmptyBoard();\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.start();\n  }\n\n  // Add your own methods here\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  compressRow(row) {\n    let newRow = row.filter((num) => num !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n    newRow = newRow.filter((num) => num !== 0);\n\n    while (newRow.length < this.boardSize) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  transpose() {\n    const transposed = this.createEmptyBoard();\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        transposed[i][j] = this.board[j][i];\n      }\n    }\n    this.board = transposed;\n  }\n\n  isWin() {\n    return this.board.flat().includes(2048);\n  }\n\n  isGameOver() {\n    if (this.board.flat().includes(0)) {\n      return false;\n    }\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize - 1; j++) {\n        if (\n          this.board[i][j] === this.board[i][j + 1] ||\n          this.board[j][i] === this.board[j + 1][i]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","boardSize","board","createEmptyBoard","score","status","key","value","i","push","Array","fill","moved","row","newRow","compressRow","toString","addRandomTile","isGameOver","isWin","map","reverse","moveLeft","transpose","moveRight","start","emptyCells","j","x","y","_emptyCells_Math_floor","Math","floor","random","filter","num","transposed","flat","includes","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$gameScoreElement","document","querySelector","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$cells","from","querySelectorAll","$197cd56b15c33885$var$updateUI","state","getState","textContent","getScore","forEach","cell","className","classList","add","concat","getStatus","remove","addEventListener","e","moveUp","moveDown","restart"],"version":3,"file":"index.a60cfa05.js.map"}