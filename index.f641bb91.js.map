{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = null){\n        this.boardSize = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    // eslint-disable-next-line no-console\n    // console.log(initialState);\n    }\n    createEmptyBoard() {\n        const board = [];\n        for(let i = 0; i < this.boardSize; i++)board.push(new Array(this.boardSize).fill(0));\n        return board;\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < this.boardSize; row++){\n            const newRow = this.compressRow(this.board[row]);\n            if (this.board[row].toString() !== newRow.toString()) {\n                moved = true;\n                this.board[row] = newRow;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            if (this.isGameOver()) this.status = \"lose\";\n            else if (this.isWin()) this.status = \"win\";\n        }\n    }\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse());\n        this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"idle\") {\n            this.score = 0;\n            this.status = \"playing\";\n            this.board = this.createEmptyBoard();\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.start();\n    }\n    // Add your own methods here\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.boardSize; i++){\n            for(let j = 0; j < this.boardSize; j++)if (this.board[i][j] === 0) emptyCells.push({\n                x: i,\n                y: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { x: x, y: y } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    compressRow(row) {\n        let newRow = row.filter((num)=>num !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        newRow = newRow.filter((num)=>num !== 0);\n        while(newRow.length < this.boardSize)newRow.push(0);\n        return newRow;\n    }\n    transpose() {\n        const transposed = this.createEmptyBoard();\n        for(let i = 0; i < this.boardSize; i++)for(let j = 0; j < this.boardSize; j++)transposed[i][j] = this.board[j][i];\n        this.board = transposed;\n    }\n    isWin() {\n        return this.board.flat().includes(2048);\n    }\n    isGameOver() {\n        if (this.board.flat().includes(0)) return false;\n        for(let i = 0; i < this.boardSize; i++)for(let j = 0; j < this.boardSize - 1; j++){\n            if (this.board[i][j] === this.board[i][j + 1] || this.board[j][i] === this.board[j + 1][i]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$cells = Array.from(document.querySelectorAll(\".field-cell\"));\nfunction $09e991522ca7e64e$var$updateUI() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameScoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$cells.forEach((cell, i)=>{\n        const row = Math.floor(i / 4);\n        const col = i % 4;\n        const value = state[row][col];\n        cell.textContent = value > 0 ? value : \"\";\n        cell.className = \"field-cell\";\n        if (value > 0) cell.classList.add(`field-cell--${value}`);\n    });\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ([\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ].includes(e.key)) {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateUI();\n    }\n});\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\n\n\n//# sourceMappingURL=index.f641bb91.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameScoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst cells = Array.from(document.querySelectorAll('.field-cell'));\n\nfunction updateUI() {\n  const state = game.getState();\n\n  gameScoreElement.textContent = game.getScore();\n\n  cells.forEach((cell, i) => {\n    const row = Math.floor(i / 4);\n    const col = i % 4;\n    const value = state[row][col];\n\n    cell.textContent = value > 0 ? value : '';\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction startGame() {\n  game.start();\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startButton.textContent = 'Restart';\n  startButton.classList.add('restart');\n  startButton.classList.remove('start');\n  updateUI();\n}\n\nfunction restartGame() {\n  game.restart();\n  updateUI();\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateUI();\n  }\n});\n\nstartButton.addEventListener('click', startGame);\n\nstartButton.addEventListener('click', restartGame);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.boardSize = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n    // eslint-disable-next-line no-console\n    // console.log(initialState);\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < this.boardSize; i++) {\n      board.push(new Array(this.boardSize).fill(0));\n    }\n\n    return board;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.boardSize; row++) {\n      const newRow = this.compressRow(this.board[row]);\n\n      if (this.board[row].toString() !== newRow.toString()) {\n        moved = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n\n      if (this.isGameOver()) {\n        this.status = 'lose';\n      } else if (this.isWin()) {\n        this.status = 'win';\n      }\n    }\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.score = 0;\n      this.status = 'playing';\n      this.board = this.createEmptyBoard();\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.start();\n  }\n\n  // Add your own methods here\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  compressRow(row) {\n    let newRow = row.filter((num) => num !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n    newRow = newRow.filter((num) => num !== 0);\n\n    while (newRow.length < this.boardSize) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  transpose() {\n    const transposed = this.createEmptyBoard();\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        transposed[i][j] = this.board[j][i];\n      }\n    }\n    this.board = transposed;\n  }\n\n  isWin() {\n    return this.board.flat().includes(2048);\n  }\n\n  isGameOver() {\n    if (this.board.flat().includes(0)) {\n      return false;\n    }\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize - 1; j++) {\n        if (\n          this.board[i][j] === this.board[i][j + 1] ||\n          this.board[j][i] === this.board[j + 1][i]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","boardSize","board","createEmptyBoard","score","status","i","push","Array","fill","moveLeft","moved","row","newRow","compressRow","toString","addRandomTile","isGameOver","isWin","moveRight","map","reverse","moveUp","transpose","moveDown","getScore","getState","getStatus","start","restart","emptyCells","j","x","y","length","Math","floor","random","filter","num","transposed","flat","includes","$09e991522ca7e64e$var$gameScoreElement","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$cells","from","querySelectorAll","$09e991522ca7e64e$var$updateUI","state","textContent","forEach","cell","value","className","classList","add","remove","addEventListener","e","key"],"version":3,"file":"index.f641bb91.js.map"}